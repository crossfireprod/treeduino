/*
 ***************************
 *     Treeduino 2010      *
 * Zach Cross & Jacob Ford *
 ***************************
 * 
 * Most of the Ethernet related parts of the code are derived from the Web_Demo sketch of the webduino library (Ben Combee).
 */
 
 /* CHANGELOG
  *
  * v1.0:
  * - It kinda works... (Z)
  * 
  * v1.1:
  * - IT WORKS! (Z)
  *
  * v1.2:
  * - Some un version controlled experimenting. All added features are refined/altered in version 1.4. (Z)
  *
  * v1.3:
  * - Format changes to fit rest of webpage. (J)
  * - Adds "flick" counter, stores value to EEPROM. (Z)
  *
  * v1.4:
  * - "Lights On" counter fully works.  Increments each time a digital output is set to HIGH. (Z)
  * - "String #" Has been replaced by a name for each string. (Z)
  *
  * v1.5:
  * - Sets background color to match treeduino.com. (Workaround to fix a rendering error in IE.) (J)
  * - Added multi-colored string. (Z)
  * - Added temp sensor to monitor WizNet Chip. (Z)
  *     + Serial Print
  *     + High / Low Temperature
  *
  * v1.6:
  * - HTML modifications for improved appearance. (J)
  *
  * v1.7:
  * - Temperature sensor readout now included in web form as well as serial print. (Z)
  * - More HTML formating improvements. (J)
  */

#include "Ethernet.h"
#include "WebServer.h"
#include <EEPROM.h>

#include <OneWire.h>
#include <DallasTemperature.h>
#include <SimpleTimer.h>

SimpleTimer timer;

// Temp Probe Setup
#define ONE_WIRE_BUS 8  // Data wire is plugged into port 8 on the Arduino
OneWire oneWire(ONE_WIRE_BUS);  // Setup a oneWire instance to communicate with any OneWire devices (not just Maxim/Dallas temperature ICs)
DallasTemperature sensors(&oneWire);  // Pass our oneWire reference to Dallas Temperature.

double currentTemp0, highTemp, lowTemp, meanTemp;  // Stores temperature data.
int senseIteration, senseIterationReset, senseInterval;
// END Temp Probe Setup

// EEPROM Functions
template <class T> int EEPROM_writeAnything(int ee, const T& value)
{
    const byte* p = (const byte*)(const void*)&value;
    int i;
    for (i = 0; i < sizeof(value); i++)
	  EEPROM.write(ee++, *p++);
    return i;
}

template <class T> int EEPROM_readAnything(int ee, T& value)
{
    byte* p = (byte*)(void*)&value;
    int i;
    for (i = 0; i < sizeof(value); i++)
	  *p++ = EEPROM.read(ee++);
    return i;
}
// END EEPROM Functions

int mainCounter;

// no-cost stream operator as described at 
// http://sundial.org/arduino/?page_id=119
template<class T>
inline Print &operator <<(Print &obj, T arg)
{ obj.print(arg); return obj; }


// CHANGE THIS TO YOUR OWN UNIQUE VALUE
static uint8_t mac[] = { 0xDE, 0xAD, 0xBE, 0xEF, 0xFE, 0xED };

// CHANGE THIS TO MATCH YOUR HOST NETWORK
static uint8_t ip[] = { 192, 168, 1, 100 };

#define PREFIX "/tree"

WebServer webserver(PREFIX, 80);

// commands are functions that get called by the webserver framework
// they can read any posted data from client, and they output to server

void jsonCmd(WebServer &server, WebServer::ConnectionType type, char *url_tail, bool tail_complete)
{
  if (type == WebServer::POST)
  {
    server.httpFail();
    return;
  }

  server.httpSuccess(false, "application/json");
  
  if (type == WebServer::HEAD)
    return;

  int i;    
  server << "{ ";
  for (i = 0; i <= 9; ++i)
  {
    // ignore the pins we use to talk to the Ethernet chip
    int val = digitalRead(i);
    server << "\"d" << i << "\": " << val << ", ";
  }

  for (i = 0; i <= 5; ++i)
  {
    int val = analogRead(i);
    server << "\"a" << i << "\": " << val;
    if (i != 5)
      server << ", ";
  }
  
  server << " }";
}

void outputPins(WebServer &server, WebServer::ConnectionType type, bool addControls = false)
{
  P(htmlHead) =
    "<html>"
    "<head>"
    "<style type=\"text/css\">"
    "BODY { font-family: sans-serif; text-align: center; background: #6699FF; }"
    "H1 { font-size: 14pt; color: #FFFFFFF; text-decoration: none }"
    "P  { font-size: 10pt; }"
	"div.radiobuttons  { text-align: right; width: 250px;}"
    "</style>"
    "</head>"
    "<body>"
    "<br>";

  int i;
  server.httpSuccess();
  server.printP(htmlHead);

  if (addControls)
    server << "<form action='" PREFIX "/form' method='post'>";

	server << "<div id='radiobuttons'><br>";
	
  for (i = 2; i <= 4; ++i)
  {
    // ignore the pins we use to talk to the Ethernet chip
    int val = digitalRead(i);
    
    char* strLightStrings[] = {"", "", "White Lights", "Colored Lights", "Star"};
    
    server << strLightStrings[i];
    if (addControls)
    {
      char pinName[5];
      pinName[0] = 'd';
      itoa(i, pinName + 1, 10);
      server.radioButton(pinName, "1", "On", val);
      server << " ";
      server.radioButton(pinName, "0", "Off", !val);
    }
    else
      server << (val ? "HIGH" : "LOW");
  }
  
  server << "</div>";
  server << "<div id='lower'>";

  /* 
  // Analog Pin Read
  server << "</p><h1>Analog Pins</h1><p>";
  for (i = 0; i <= 5; ++i)
  {
    int val = analogRead(i);
    server << "Analog " << i << ": " << val << "<br/>";
  }

  server << "</p>";
  // END Analog Pin Read 
  */

  
  if (addControls)
    server << "<input type='submit' value='Send to Tree'/></form>";
    // EEPROM counter Print Value
    server << "The scene has been set " << mainCounter << " times.";
    // END EEPROM counter Print Value

  // Temperature Probe Readout
  server << "<p style='font-color: #6699FF;'>";
  server << "<h3>You Found the Souper Seecrit Temperature Sensor!</h3>";
  server << "<br>Current Temp:" << currentTemp0 << "F";
  server << "<br>High Temp: " << highTemp << "F";
  server << "<br>Low Temp: " << lowTemp << "F";
  server << "<br>This is a probe sitting on the WizNet";
  server << "<br>chip on the ethernet shield.";
  server << "</p>";
  // END Temperature Probe Readout
  
  server << "</div></body></html>";
}

void formCmd(WebServer &server, WebServer::ConnectionType type, char *url_tail, bool tail_complete)
{
  if (type == WebServer::POST)
  {
     // EEPROM Counter
         mainCounter += 1;
         EEPROM_writeAnything(0, mainCounter);
         // END EEPROM Counter
    bool repeat;
    char name[16], value[16];
    do
    {
      repeat = server.readPOSTparam(name, 16, value, 16);
      if (name[0] == 'd')
      {
        int pin = strtoul(name + 1, NULL, 10);
        int val = strtoul(value, NULL, 10);
        digitalWrite(pin, val);
      }
    } while (repeat);

    server.httpSeeOther(PREFIX "/form");
  }
  else
    outputPins(server, type, true);
}

void defaultCmd(WebServer &server, WebServer::ConnectionType type, char *url_tail, bool tail_complete)
{
  outputPins(server, type, false);  
}

void getTemp()
{
  sensors.requestTemperatures();
  currentTemp0 = sensors.getTempFByIndex(0);
}

void assessTemp()
{
  senseIteration += 1;
  if (senseIteration == 32765)
  {
    senseIteration = 1;
    senseIterationReset += 1;
    // Started at -31744
    EEPROM_writeAnything(25, senseIterationReset);
  }
  
  EEPROM_writeAnything(20, senseIteration);
  getTemp();
  
  if (currentTemp0 > highTemp) {
      highTemp = currentTemp0;
      EEPROM_writeAnything(10, highTemp);
  }
  if (currentTemp0 < lowTemp) {
      lowTemp = currentTemp0;
      EEPROM_writeAnything(15, lowTemp);
  }

  Serial.println("WizNet Temperature Probe Readout");
  Serial.println("**********************************");
  Serial.print("Sense iteration: ");
  Serial.println(senseIteration);
  Serial.print("SI Reset: ");
  Serial.println(senseIterationReset);

  Serial.print("Sense & print interval (milliseconds): ");
  Serial.println(senseInterval);
  Serial.println();
  
  Serial.print("Current Temperature: ");
  Serial.println(currentTemp0);

  Serial.print("High Temperature: ");
  Serial.println(highTemp);
    
  Serial.print("Low Temperature: ");
  Serial.println(lowTemp);
  Serial.println();
  Serial.print("The scene has been set: ");
  Serial.println(mainCounter);
  Serial.println("********* END Readout *********");
  Serial.println();
  Serial.println();
  }

void setup()
{
  // set pins 0-8 for digital output
  for (int i = 2; i <= 6; ++i)
    pinMode(i, OUTPUT);
  pinMode(6, OUTPUT);

  Ethernet.begin(mac, ip);
  webserver.begin();

  EEPROM_readAnything(0, mainCounter);

  webserver.setDefaultCommand(&defaultCmd);
  webserver.addCommand("json", &jsonCmd);
  webserver.addCommand("form", &formCmd);

  Serial.begin(9600);   // start serial port
  sensors.begin();     // Start up the temp sensor library
  
 // highTemp = 90;
 // lowTemp = 150;
  EEPROM_readAnything(10, highTemp);
  EEPROM_readAnything(15, lowTemp);
  EEPROM_readAnything(20, senseIteration);
  EEPROM_readAnything(25, senseIterationReset);
  
  senseInterval = 10000;
  timer.setInterval(senseInterval, assessTemp);
}

void loop()
{
  // process incoming connections one at a time forever
  webserver.processConnection();

  // if you wanted to do other work based on a connecton, it would go here
 timer.run();
}
